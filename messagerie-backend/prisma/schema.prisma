// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(cuid())
  clerkId       String             @unique
  email         String             @unique
  name          String             @unique
  conversations ConversationUser[]
  messages      Message[]
  friendships   Friendship[]       @relation("userFriends")
  friendOf      Friendship[]       @relation("friendOfUser")
  notifications Notification[]
  createdAt     DateTime           @default(now())
}

model Friendship {
  id        String   @id @default(cuid())
  user      User     @relation("userFriends", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  friend    User     @relation("friendOfUser", fields: [friendId], references: [id], onDelete: Cascade)
  friendId  String
  status    String   // 'pending', 'accepted', 'blocked'
  createdAt DateTime @default(now())

  @@unique([userId, friendId])
}

model Conversation {
  id       String             @id @default(cuid())
  title    String?
  messages Message[]
  users    ConversationUser[]

  createdAt DateTime @default(now())
}

model ConversationUser {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  role           String
  joinedAt       DateTime     @default(now())
  @@unique([conversationId, userId])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  author         User?        @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId       String?
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  createdAt      DateTime     @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  message   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
}